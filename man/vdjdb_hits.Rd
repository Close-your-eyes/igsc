% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/vdjdb_hits.R
\name{vdjdb_hits}
\alias{vdjdb_hits}
\title{Compare CDR3s from sequencing to known CDR3s in the vdjdb}
\usage{
vdjdb_hits(
  vdjdb,
  tcrs,
  vdj_tr_col = "Gene",
  tcr_tr_col = "chain",
  vdj_cdr3_col = "CDR3",
  tcr_cdr3_col = "CDR3_aa_cr",
  TRAxTRB = F,
  max_lvdist = 3,
  PAM30_similarity = F,
  mapply_fun = mapply,
  nthread = getOption("sd_num_thread"),
  ...
)
}
\arguments{
\item{vdjdb}{data frame of TCR data from vdjdb, first column indicating the chain TRA or TRB, second the aa sequence of CDR3}

\item{tcrs}{data frame of TCR data from sequencing, first column indicating the chain TRA or TRB, second the aa sequence of CDR3}

\item{vdj_tr_col}{column (name) which codes the TCR chain (TRA or TRB) in the vdjdb reference data frame}

\item{tcr_tr_col}{column (name) which codes the TCR chain (TRA or TRB) in the tcrs data frame}

\item{vdj_cdr3_col}{column (name) which codes the CDR3s in the vdjdb reference data frame}

\item{tcr_cdr3_col}{column (name) which codes the CDR3s in the tcrs data frame}

\item{TRAxTRB}{logical, apart from comparing TRA vs TRA and TRB vs TRB between tcrs and vdjdb also check for TRA vs TRB?}

\item{max_lvdist}{maximum levensthein distance between CDR3s for return data frame (also filtering before PAM30 similarity calculation)}

\item{PAM30_similarity}{logical whether to calculate the similarity between CDR3s based on PAM30 substitution matrix}

\item{mapply_fun}{mapply function for PAM30_similarity, suggested are mapply, pbapply::pbmapply, parallel::mcmapply}

\item{nthread}{number of threads (cores) to use for levensthein distance calculation}

\item{...}{arguments passed to mapply_fun, most relevant: mc.cores (e.g parallel::detectCores())}
}
\value{
data frame of matched CDR3s from tcrs and vdjdb, column lv indicates the levensthein
between CDR3 from vdjdb and tcrs
}
\description{
Matching CDR3s from sequencing with CDR3s of known antigen specificity may help to narrow potential antigen specificities
of one's sequenced TCRs. Export a tsv of all or selected entries here https://vdjdb.cdr3.net/search. Provide that tsv as
data frame (vdjdb). From vdjdb and tcrs distinct rows of tr_cols and cdr3_col are compared by levensthein distance
and if selected (PAM30_similarity) by amino acid similarity. Returned data frame may be used to join original columns
from vdjdb and tcrs followed by plotting with ggplot2 (see example). Original column names (vdj_tr_col, tcr_tr_col and
vdj_cdr3_col, tcr_cdr3_col) are kept in the returned data frame to allow easy subsequent joining of vdjdb and tcrs. It requires
though that these columns have different names in vdjdb and tcrs.
}
\examples{
\dontrun{
vdjdb <- dplyr::filter(read.csv("vdjdb.tsv", sep = "\t", header = T) , Species == "HomoSapiens")
matches <- vdjdb_hits(vdjdb, tcrs, mapply_fun = parallel::mcmapply, mc.cores = parallel::detectCores(), nthread = parallel::detectCores())
matches <- matches \%>\% dplyr::left_join(tcrs) \%>\% dplyr::left_join(vdjdb) \%>\% dplyr::distinct(complex.id, CDR3, CDR3_aa_cr, lv, Gene, chain, clonotype_id_cr, sample, Epitope, Epitope.gene, Epitope.species, Score)

ggplot(matches, aes(x = chain, y = lv, fill = Epitope.species, color = Gene)) +
geom_jitter(width = 0.15, height = 0.15, shape = 21) +
scale_y_continuous(breaks = fcexpr::int_breaks(n = 3)) +
theme_bw() +
theme(panel.grid.major.x = element_blank()) +
scale_color_manual(values = c("#000000", "#999999")) +
guides(fill = guide_legend(override.aes = list(size = 5)), color = guide_legend(override.aes = list(size = 5))) +
facet_grid(rows = vars(Score), cols = vars(clonotype_id_cr))
}
}
