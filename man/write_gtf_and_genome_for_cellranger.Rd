% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/write_gtf_and_genome_for_cellranger.R
\name{write_gtf_and_genome_for_cellranger}
\alias{write_gtf_and_genome_for_cellranger}
\title{Prepare files for creating a reference genome with mkref}
\usage{
write_gtf_and_genome_for_cellranger(
  data,
  genome_file_name = "genome.fa",
  gtf_file_name = "genes.gtf",
  save_path = NULL,
  gtf_header =
    c("##description: made with write_gtf_and_genome_for_cellranger function from https://github.com/Close-your-eyes/igsc",
    "##provider: CMS", "##conctact: vonskopnik@pm.me", "##format: gtf",
    paste0("##date: ", Sys.Date())),
  features_to_become_exon = c("CDS"),
  other_features_to_write = NULL,
  append = F,
  overwrite = F,
  genome_file_linewidth = 60
)
}
\arguments{
\item{data}{a named list; each list element has to contain a character (string) named "origin"
which becomes one entry in the genome fasta file; the respective name of the list element
become the header for the fasta entry; classically this would be one chromosome in a hg38 ref;
another element of each list entry is a data frame named "features" which contains the features
of origin; the data frame has to have these columns: "range", "complement", "Feature", "value";
checkout the return of igsc::webscrape_ncbi to understand the columns; entries in the value
column are converted by make.names to replace special symbols by dots}

\item{genome_file_name}{filename of the genome file; genome.fa by default}

\item{gtf_file_name}{filename of the gtf file; genes.gtf by default}

\item{save_path}{path where to save genome_file and gtf_file}

\item{gtf_header}{header lines for gtf files, each vector element becomes one line}

\item{features_to_become_exon}{features from the Feature column in features data frames
which become an entry called 'exon' in the gtf file; cellranger only considers entry which
have 'exon' in the respective column; so even when we do not write exon boundaries into the
gtf file but those of, e.g. a whole protein coding sequence, this must be named exon}

\item{other_features_to_write}{other features from Feature column in features data frames
to write into the gtf file}

\item{append}{append genome_file and gtf_file?; only one of append or overwrite can be TRUE}

\item{overwrite}{overwrite existing genome_file and gtf_file?; only one of append or overwrite can be TRUE}

\item{genome_file_linewidth}{max number of character per line in genome_file; 60 by default}
}
\value{
genome_file_name and gtf_file_name written to disk at save_path; their content returned as character vectors
}
\description{
The function is specifically designed to receive the return values from
igsc::webscrape_ncbi. One list entry of data (see the fun argument) would be one returned
list from that function. Moreover it is designed to allow passing its results to cellrangers
mkref in order to create a reference genome for mapping of single cell RNA seq data.
See documentations here: https://www.10xgenomics.com/support/software/cell-ranger/latest/tutorials/cr-tutorial-mr,
https://www.ensembl.org/info/website/upload/gff.html, https://support.10xgenomics.com/single-cell-gene-expression/software/pipelines/latest/advanced/references#multi,
https://kb.10xgenomics.com/hc/en-us/articles/115003327112-How-can-we-add-genes-to-a-reference-package-for-Cell-Ranger-
}
\examples{
\dontrun {
# example accession from viral genomes
# these are small genomes hence the complete genome sequence is found under these accession
# for larger genomes, e.g. from bacteria, checkout NCBIs genome repository: https://www.ncbi.nlm.nih.gov/datasets/genome/
viral_genome_accessions <- c("NC_007605.1","NC_006273.2","NC_001806.2","NC_001798.2","NC_001348.1")
ncbi_data_list <- lapply(setNames(viral_genome_accessions, viral_genome_accessions), function(x) igsc::webscrape_ncbi(accession = x))
# select a subset of features only
# other modification to features data are possible to restrict what ends up in the gtf file
ncbi_data_list <- purrr::map(ncbi_data_list, function(x) {
x[["features"]] <- dplyr::filter(x[["features"]], Subfeature == "locus_tag")
return(x)
})
# this write files with viral sequences only
write_gtf_and_genome_for_cellranger(data = ncbi_data_list, save_path = file.path(wd, "HHV_ref_genome"))

# to append hg38: download the reference genome from 10X genomics then run
# write_gtf_and_genome_for_cellranger, select genome.fa and genes.gtf from this ref genome
# as genome_file_name and gtf_file_name and set append = TRUE.
# it was noted that more UMIs are assigned to ref sequences from human herpesvirus
# when a pure HHV ref is used compared to when hg38 is appended
}
}
